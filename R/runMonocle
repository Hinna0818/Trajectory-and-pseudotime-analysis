#' Wrapper function for running monocle3 with default parameters.
#' 
#' @param sce SingleCellExperiment object.
#' @param cluster_column The column to use for clustering.
#' @param assay_name The name of assay. Defaults to "logcounts".
#' @param use_auto_root Logical. Use automatic root finding.
#' @param time_bin_column Column for time bin, required if use_auto_root is TRUE.
#' @param time_bin_value Value within time_bin_column to define initial state.
#' @param reduction_method Dimensionality reduction method, default is "UMAP".
#' @param batch Logical. Remove batch effect if TRUE.
#' @param seed Random seed for reproducibility.
#' 
#' @importFrom SummarizedExperiment assay assayNames
#' @export

runMonocle <- function(
    sce,
    assay_name = "logcounts",
    use_auto_root = FALSE,
    time_bin_column = NULL,
    time_bin_value = NULL,
    reduction_method = "UMAP",
    cluster_column = "clusters",
    use_preprocess = FALSE,
    batch = FALSE,
    num_dims = 50,
    resolution = 1e-5,
    seed = 2024-11-1
){
  
  set.seed(seed)
  
  ## Internal function to find root automatically
  get_earliest_principal_node <- function(cds) {
    cell_ids <- which(colData(cds)[[time_bin_column]] == time_bin_value)
    closest_vertex <- as.matrix(cds@principal_graph_aux[["UMAP"]]$pr_graph_cell_proj_closest_vertex[colnames(cds), ])
    root_pr_nodes <- igraph::V(principal_graph(cds)[["UMAP"]])$name[
      as.numeric(names(which.max(table(closest_vertex[cell_ids, ]))))
    ]
    
    if (length(root_pr_nodes) == 0) {
      stop("No root node was found. Please specify a valid time_bin_column and time_bin_value.")
    }
    root_pr_nodes
  }
  
  ## Check for and normalize logcounts
  if (!assay_name %in% assayNames(sce)) {
    message("Logcounts assay not found; generating automatically.")
    sce <- scuttle::logNormCounts(sce)
  }
  
  ## Initialize CellDataSet
  counts_matrix <- SummarizedExperiment::assay(sce, assay_name)
  gene_metadata <- data.frame(gene_short_name = rownames(counts_matrix), row.names = rownames(counts_matrix))
  cell_metadata <- as.data.frame(colData(sce))
  cds <- monocle3::new_cell_data_set(counts_matrix, cell_metadata = cell_metadata, gene_metadata = gene_metadata)
  
  ## Preprocess the data if necessary
  if (use_preprocess) {
    cds <- monocle3::preprocess_cds(cds, num_dim = num_dims)
    
    # Elbow plot for optimal number of dimensions
    message("Generating elbow plot...")
    print(monocle3::plot_pc_variance_explained(cds))
    new_num_dims <- as.numeric(readline("Enter optimal number of dimensions: "))
    
    if (!is.na(new_num_dims) && new_num_dims != num_dims) {
      num_dims <- new_num_dims
      cds <- monocle3::preprocess_cds(cds, num_dim = num_dims)
    }
    
    # Dimensionality reduction and batch effect correction
    cds <- monocle3::reduce_dimension(cds, reduction_method = reduction_method)
    if (batch && "plate" %in% colnames(colData(cds))) {
      cds <- monocle3::align_cds(cds, num_dim = num_dims, alignment_group = "plate")
      cds <- monocle3::reduce_dimension(cds, reduction_method = reduction_method)
    }
    
    cds <- monocle3::cluster_cells(cds, resolution = resolution)
  } 
  else {
    if (!is.null(SingleCellExperiment::reducedDims(sce))) {
      reducedDims(cds)$UMAP <- reducedDims(sce)[[reduction_method]]
    } 
    else {
      stop("Provided SCE object lacks reduced dimensions.")
    }
    
    if (cluster_column %in% colnames(colData(sce))) {
      cds@clusters$UMAP$clusters <- factor(cell_metadata[[cluster_column]])
    } 
    else {
      stop("Specified cluster column not found in SCE object.")
    }
  }
  
  ## Trajectory and Pseudotime Analysis
  cds <- monocle3::learn_graph(cds)
  if (use_auto_root && !is.null(time_bin_column) && !is.null(time_bin_value)) {
    root_pr_nodes <- get_earliest_principal_node(cds)
    cds <- order_cells(cds, root_pr_nodes = root_pr_nodes)
  } 
  else {
    cds <- order_cells(cds)
  }
  
  return(cds)
}
